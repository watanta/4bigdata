i = "aic",
max.order = 7,
stepwise = F,
approximation = F,
parallel = T,
num.cores = 4
)
model_arima1
checkresiduals(model_arima1)
arima_predict <- forecast(
model_arima1,
h = 90,
level = c(95,70)
)
arima_predict
autoplot(arima_predict, predict.colour=1, main = "ARIMA predict")
#ナイーブ予測
##平均
naive_f_mean <- meanf(train[,"高低左"], h = 90)
naive_f_mean
##最近の値
naive_f_latest <- rwf(train[,"高低左"], h=90)
naive_f_latest
#RMSEの計算
arima_rmse1 <- sqrt(
sum((arima_predict$mean - test[, "高低左"])^2) /
length(arima_predict$mean)
)
arima_rmse1
accuracy(arima_predict, x=test[,"高低左"])
accuracy(naive_f_mean, x=test[,"高低左"])
accuracy(naive_f_latest, x=test[,"高低左"])
kilo10001 <- read_csv("GitHub/4bigdata/code/kilo10001_inter.csv")
colnames(kilo10001) <- c("date", "キロ程", "高低左", "高低右", "通り左", "通り右", "水準", "軌間", "速度")
kilo10001 <- ts(kilo10001, start=c(2017,4), frequency=365)
#2017/4/1~2017/12/31
train <- kilo10001[0:275,]
#2018/1/1~2018/3/31
test <- kilo10001[276:365,]
model_arima2 <- auto.arima(
y = train[,"高低左"],
i = "aic",
max.order = 7,
stepwise = F,
approximation = F,
parallel = T,
num.cores = 4
)
model_arima2
checkresiduals(model_arima2)
arima_predict <- forecast(
model_arima2,
h = 90,
level = c(95,70)
)
arima_predict
autoplot(arima_predict, predict.colour=1, main = "ARIMA predict")
#ナイーブ予測
##平均
naive_f_mean <- meanf(train[,"高低左"], h = 90)
naive_f_mean
##最近の値
naive_f_latest <- rwf(train[,"高低左"], h=90)
naive_f_latest
#RMSEの計算
arima_rmse2 <- sqrt(
sum((arima_predict$mean - test[, "高低左"])^2) /
length(arima_predict$mean)
)
arima_rmse2
accuracy(arima_predict, x=test[,"高低左"])
accuracy(naive_f_mean, x=test[,"高低左"])
accuracy(naive_f_latest, x=test[,"高低左"])
kilo10002 <- read_csv("GitHub/4bigdata/code/kilo10002_inter.csv")
colnames(kilo10002) <- c("date", "キロ程", "高低左", "高低右", "通り左", "通り右", "水準", "軌間", "速度")
kilo10002 <- ts(kilo10002, start=c(2017,4), frequency=365)
#2017/4/1~2017/12/31
train <- kilo10002[0:275,]
#2018/1/1~2018/3/31
test <- kilo10002[276:365,]
model_arima3 <- auto.arima(
y = train[,"高低左"],
i = "aic",
max.order = 7,
stepwise = F,
approximation = F,
parallel = T,
num.cores = 4
)
model_arima3
checkresiduals(model_arima3)
arima_predict <- forecast(
model_arima3,
h = 90,
level = c(95,70)
)
arima_predict
autoplot(arima_predict, predict.colour=1, main = "ARIMA predict")
#ナイーブ予測
##平均
naive_f_mean <- meanf(train[,"高低左"], h = 90)
naive_f_mean
##最近の値
naive_f_latest <- rwf(train[,"高低左"], h=90)
naive_f_latest
arima_rmse3
#RMSEの計算
arima_rmse3 <- sqrt(
sum((arima_predict$mean - test[, "高低左"])^2) /
length(arima_predict$mean)
)
accuracy(arima_predict, x=test[,"高低左"])
accuracy(naive_f_mean, x=test[,"高低左"])
accuracy(naive_f_latest, x=test[,"高低左"])
mean_arima_rmse <- ave(arima_rmse1,arima_rmse2,arima_rmse3)
mean_arima_rmse <- ave(var_rmse1, var_rmse2, var_rmse3)
mean_arima_var <- ave(var_rmse1, var_rmse2, var_rmse3)
mean_var_rmse <- ave(var_rmse1, var_rmse2, var_rmse3)
mean_arima_rmse <- ave(arima_rmse1,arima_rmse2,arima_rmse3)
library(devtools)
install.packages("devtools")
library(rstan)
install.packages("rstan")
install.packages("pforeach")
install.packages("pforeach")
install.packages("pforeach")
data <- read.table("../code/kilo10000_inter.csv")
library(readr)
kilo10000_inter <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
library(devtools)
library(rstan)
library(pforeach)
ggplot2::theme_set(theme_bw(base_family="HiraKakuProN-W3"))
library(ggplot2)
library(ggfortify)
# モデルが収束しているか確認
is.converged <- function(stanfit) {
summarized <- summary(stanfit)
all(summarized$summary[, 'Rhat'] < 1.1)
}
# 値がだいたい近いか確認
is.almost.fitted <- function(result, expected, tolerance = 0.001) {
if (abs(result - expected) > tolerance) {
print(paste('Result is ', result))
return(FALSE)
} else {
return(TRUE)
}
}
library(readr)
kilo10000_inter <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
View(kilo10000_inter)
kilo10000 <- ts(kilo10000, start=c(2017,4), frequency=365)
library(readr)
kilo10000 <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
kilo10000 <- ts(kilo10000, start=c(2017,4), frequency=365)
setwd("~/GitHub/4bigdata/code")
setwd("~/GitHub")
library(readr)
kilo10000 <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
setwd("~/")
library(readr)
kilo10000 <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
kilo10000 <- ts(kilo10000, start=c(2017,4), frequency=365)
model_file <- '../models/fig02_03.stan'
cat(paste(readLines(model_file)), sep = '\n')
model_file <- 'GitHub/4bigdata/code/model.txt'
cat(paste(readLines(model_file)), sep = '\n')
model_file <- 'GitHub/4bigdata/code/model.txt'
cat(paste(readLines(model_file)), sep = '\n')
model_file <- 'GitHub/4bigdata/code/model.txt'
cat(paste(readLines(model_file)), sep = '\n')
y <- data[,"高低左"]
y <- kilo10000[,"高低左"]
standata <- within(list(), {
y <- as.vector(y)
n <- length(y)
})
View(standata)
stan_fit <- stan(file = model_file, chains = 0)
library(devtools)
library(rstan)
install.packages("rstan")
Sys.getenv("PATH")
system('g++ -v')
Sys.getenv("PATH")
system('g++ -v')
install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", type = "source")
Sys.getenv("PATH")
system('g++ -v')
system('where make')
install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
library(rstan)
library(devtools)
library(rstan)
inlibrary(pforeach)
library(pforeach)
install.packages("pforeach")
library(ggplot2)
ggplot2::theme_set(theme_bw(base_family="HiraKakuProN-W3"))
library(ggfortify)
# モデルが収束しているか確認
is.converged <- function(stanfit) {
summarized <- summary(stanfit)
all(summarized$summary[, 'Rhat'] < 1.1)
}
# 値がだいたい近いか確認
is.almost.fitted <- function(result, expected, tolerance = 0.001) {
if (abs(result - expected) > tolerance) {
print(paste('Result is ', result))
return(FALSE)
} else {
return(TRUE)
}
}
library(readr)
kilo10000 <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
kilo10000 <- ts(kilo10000, start=c(2017,4), frequency=365)
model_file <- 'GitHub/4bigdata/code/model.txt'
cat(paste(readLines(model_file)), sep = '\n')
y <- kilo10000[,"高低左"]
standata <- within(list(), {
y <- as.vector(y)
n <- length(y)
})
stan_fit <- stan(file = model_file, chains = 0)
stan_fit <- stan(file = model_file, chains = 0)
stan_fit <- stan(file = model_file, chains = 0)
y <- kilo10000[,"高低左"]
model_file <- 'GitHub/4bigdata/code/model.stan'
y <- kilo10000[,"高低左"]
standata <- within(list(), {
y <- as.vector(y)
n <- length(y)
})
stan_fit <- stan(file = model_file, chains = 0)
Sys.getenv('PATH')
system('g++ -v')
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", type = "source")
install.packages("rstan", type = "source")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) # 10になるはずです
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) # 10になるはずです
library(devtools)
library(rstan)
library(pforeach) #ない
library(ggplot2)
ggplot2::theme_set(theme_bw(base_family="HiraKakuProN-W3"))
library(ggfortify)
# モデルが収束しているか確認
is.converged <- function(stanfit) {
summarized <- summary(stanfit)
all(summarized$summary[, 'Rhat'] < 1.1)
}
# 値がだいたい近いか確認
is.almost.fitted <- function(result, expected, tolerance = 0.001) {
if (abs(result - expected) > tolerance) {
print(paste('Result is ', result))
return(FALSE)
} else {
return(TRUE)
}
}
library(readr)
kilo10000 <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
kilo10000 <- ts(kilo10000, start=c(2017,4), frequency=365)
y <- kilo10000[,"高低左"]
standata <- within(list(), {
y <- as.vector(y)
n <- length(y)
})
stan_fit <- stan(file = model_file, chains = 0)
model_file <- 'GitHub/4bigdata/code/model.txt'
y <- kilo10000[,"高低左"]
standata <- within(list(), {
y <- as.vector(y)
n <- length(y)
})
stan_fit <- stan(file = model_file, chains = 0)
model_file <- 'GitHub/4bigdata/code/model.stan'
y <- kilo10000[,"高低左"]
standata <- within(list(), {
y <- as.vector(y)
n <- length(y)
})
stan_fit <- stan(file = model_file, chains = 0)
packageVersion("rstan")
packageVersion("StanHeaders")
install.packages("StanHeaders")
install.packages("StanHeaders")
packageVersion("StanHeaders")
install.packages("StanHeaders", version = "2.17.2")
packageVersion("StanHeaders")
install_version("StanHeaders", version = "2.17.2")
library(devtools)
install_version("StanHeaders", version = "2.17.2")
packageVersion("StanHeaders")
system('g++ -v')
system('where make')
install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) # 10になるはずです
library(rstan)
library(devtools)
library(rstan)
library(pforeach) #ない
library(ggplot2)
ggplot2::theme_set(theme_bw(base_family="HiraKakuProN-W3"))
library(ggfortify)
# モデルが収束しているか確認
is.converged <- function(stanfit) {
summarized <- summary(stanfit)
all(summarized$summary[, 'Rhat'] < 1.1)
}
# 値がだいたい近いか確認
is.almost.fitted <- function(result, expected, tolerance = 0.001) {
if (abs(result - expected) > tolerance) {
print(paste('Result is ', result))
return(FALSE)
} else {
return(TRUE)
}
}
library(readr)
kilo10000 <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
kilo10000 <- ts(kilo10000, start=c(2017,4), frequency=365)
model_file <- 'GitHub/4bigdata/code/model.stan'
y <- kilo10000[,"高低左"]
standata <- within(list(), {
y <- as.vector(y)
n <- length(y)
})
stan_fit <- stan(file = model_file, chains = 0)
library(devtools)
library(rstan)
library(pforeach) #ない
library(ggplot2)
ggplot2::theme_set(theme_bw(base_family="HiraKakuProN-W3"))
library(ggfortify)
# モデルが収束しているか確認
is.converged <- function(stanfit) {
summarized <- summary(stanfit)
all(summarized$summary[, 'Rhat'] < 1.1)
}
# 値がだいたい近いか確認
is.almost.fitted <- function(result, expected, tolerance = 0.001) {
if (abs(result - expected) > tolerance) {
print(paste('Result is ', result))
return(FALSE)
} else {
return(TRUE)
}
}
library(readr)
kilo10000 <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
kilo10000 <- ts(kilo10000, start=c(2017,4), frequency=365)
model_file <- 'GitHub/4bigdata/code/model.stan'
y <- kilo10000[,"高低左"]
standata <- within(list(), {
y <- as.vector(y)
n <- length(y)
})
stan_fit <- stan(file = model_file, chains = 0)
remove.packages("rstan")
library(rstan)
library(rstan)
system('g++ -v')
install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
system('g++ -v')
R.version
install.packages('rstan', repos='https://cloud.r-project.org/', dependencies=TRUE)
library(devtools)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
')
fx( 2L, 5 ) # 10になるはずです
install.packages("devtools")
install.packages("pforeach")
install.packages("ggplot2")
install.packages("ggfortify")
install.packages("readr")
library(devtools)
library(rstan)
library(pforeach) #ない
library(ggplot2)
ggplot2::theme_set(theme_bw(base_family="HiraKakuProN-W3"))
library(ggfortify)
# モデルが収束しているか確認
is.converged <- function(stanfit) {
summarized <- summary(stanfit)
all(summarized$summary[, 'Rhat'] < 1.1)
}
# 値がだいたい近いか確認
is.almost.fitted <- function(result, expected, tolerance = 0.001) {
if (abs(result - expected) > tolerance) {
print(paste('Result is ', result))
return(FALSE)
} else {
return(TRUE)
}
}
library(readr)
kilo10000 <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
kilo10000 <- ts(kilo10000, start=c(2017,4), frequency=365)
model_file <- 'GitHub/4bigdata/code/model.stan'
y <- kilo10000[,"高低左"]
standata <- within(list(), {
y <- as.vector(y)
n <- length(y)
})
stan_fit <- stan(file = model_file, chains = 0)
stan_fit <- stan(file = model_file, chains = 0)
stan_fit <- stan(file = model_file, chains = 0)
library(devtools)
library(rstan)
library(pforeach) #ない
ggplot2::theme_set(theme_bw(base_family="HiraKakuProN-W3"))
library(ggplot2)
library(ggfortify)
# 値がだいたい近いか確認
is.almost.fitted <- function(result, expected, tolerance = 0.001) {
if (abs(result - expected) > tolerance) {
print(paste('Result is ', result))
return(FALSE)
} else {
return(TRUE)
}
}
library(readr)
kilo10000 <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
kilo10000 <- ts(kilo10000, start=c(2017,4), frequency=365)
model_file <- 'GitHub/4bigdata/code/model.stan'
y <- kilo10000[,"高低左"]
standata <- within(list(), {
y <- as.vector(y)
n <- length(y)
})
stan_fit <- stan(file = model_file, chains = 0)
# モデルが収束しているか確認
is.converged <- function(stanfit) {
summarized <- summary(stanfit)
all(summarized$summary[, 'Rhat'] < 1.1)
}
stan_fit <- stan(file = model_file, chains = 0)
stan_fit <- stan(file = model_file, chains = 0)
library(devtools)
library(rstan)
library(pforeach) #ない
library(ggplot2)
ggplot2::theme_set(theme_bw(base_family="HiraKakuProN-W3"))
library(ggfortify)
# モデルが収束しているか確認
is.converged <- function(stanfit) {
summarized <- summary(stanfit)
all(summarized$summary[, 'Rhat'] < 1.1)
}
# 値がだいたい近いか確認
is.almost.fitted <- function(result, expected, tolerance = 0.001) {
if (abs(result - expected) > tolerance) {
print(paste('Result is ', result))
return(FALSE)
} else {
return(TRUE)
}
}
library(readr)
kilo10000 <- read_csv("GitHub/4bigdata/code/kilo10000_inter.csv")
model_file <- 'GitHub/4bigdata/code/model.stan'
y <- kilo10000[,"高低左"]
kilo10000 <- ts(kilo10000, start=c(2017,4), frequency=365)
standata <- within(list(), {
y <- as.vector(y)
n <- length(y)
})
stan_fit <- stan(file = model_file, chains = 0)
install.packages(nonlinearTseries)
install.packages("nonlinearTseries")
setwd("~/GitHub/4bigdata/code")
library(nonlinearTseries)
data <- read.csv("../data/kilo10000.csv")
data <- read.csv("../data/kilo10000.csv",header=F)
View(data)
names(data) <-  c("date","キロ程","高低左","高低右","通り左","通り右","水準","期間","速度")
View(data)
data <- data[-1,]
View(data)
surrogateTest(time.series = data, significance = 0.05, K = 1, one.sided = FALSE, FUN = timeAnymmetry)
logMap <- logisticMap(
r = 4,
n.sample = 100,
start = 0.4,
n.transient=0,
do.plot=TRUE
)
surrogateTest(time.series = data[,"キロ程"], significance = 0.05, K = 1, one.sided = FALSE, FUN = timeAnymmetry)
kilo = data[,"キロ程"]
kilo
kilo = as.numeric(data[,"キロ程"])
surrogateTest(time.series = kilo, significance = 0.05, K = 1, one.sided = FALSE, FUN = timeAnymmetry)
surrogateTest(time.series = kilo, significance = 0.05, K = 1, one.sided = FALSE, FUN = timeAsymmetry)
